blueprint:
  name: ZHA - Lutron Aurora Dimmer
  description: "Allows for the use of the Lutron Aurora Dimmer w/ ZHA"
  domain: automation
  input:
    dimmer_switch:
      name: Lutron Aurora Dimmer Switch
      description: Lutron Aurora Z3-1BRL
      selector:
        device:
          integration: zha
          manufacturer: Lutron
          model: Z3-1BRL
          entity:
            domain: sensor
            device_class: battery
    light:
      name: Light(s)
      description: The light(s) to control
      selector:
        entity:
          domain: light

    enable_circadian:
      name: Use circadian lighting?
      description: Turns on to specific color temperature depending on time of day
      default: false
      selector:
        boolean:

  source_url: https://github.com/TheRealWaldo/ha-humidifier/blob/main/blueprints/automation/TheRealWaldo/lutron_aurora.yaml

mode: queued
max_exceeded: silent

variables:
  brightness: "{{ (trigger.event.data.args[0]|int) }}"
  enable_circadian: !input enable_circadian

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input dimmer_switch

action:

  - choose:
    - conditions:
      - "{{ trigger.event.data.command == 'move_to_level_with_on_off' }}"
      - "{{ brightness != 0 }}"
      - condition: state
        entity_id: !input light
        state: "on"

      sequence:

        - service: light.turn_on
          target:
            entity_id: !input light
          data:
            brightness: "{{ brightness }}"
            transition: 0

    - conditions:
      - "{{ trigger.event.data.command == 'move_to_level_with_on_off' }}"
      - "{{ brightness != 0 }}"
      - condition: state
        entity_id: !input light
        state: "off"
      - "{{ enable_circadian }}"

      sequence:

        - service: light.turn_on
          target:
            entity_id: !input light
          data:
            kelvin: >-
              {% if now().hour >= 22 or now().hour <= 6 %}1200{% elif now().hour >= 19 %}1500{% else %}5000{% endif %}

    - conditions:
      - "{{ trigger.event.data.command == 'move_to_level_with_on_off' }}"
      - "{{ brightness != 0 }}"
      - condition: state
        entity_id: !input light
        state: "off"
      - "{{ not enable_circadian }}"

      sequence:

        - service: light.turn_on
          target:
            entity_id: !input light

    - conditions:
      - "{{ trigger.event.data.command == 'move_to_level_with_on_off' }}"
      - "{{ brightness == 0 }}"

      sequence:
        - service: light.turn_off
          target:
            entity_id: !input light
